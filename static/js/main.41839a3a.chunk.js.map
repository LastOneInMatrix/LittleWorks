{"version":3,"sources":["Counter/ChangeValueComponent/Customizator.module.css","Counter/Counter.module.css","Counter/infoPart/ValuePart/ValuePart.module.css","Counter/Button/Button.module.css","Counter/infoPart/InfoPart.module.css","Counter/Button/Button.tsx","Counter/ChangeValueComponent/Customizator.tsx","Counter/infoPart/ValuePart/ValuePart.tsx","Counter/infoPart/InfoPart.tsx","Counter/Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","disabled","props","disabledForButton","text","inc","res","set","onClick","className","styles","style","opacity","Customization","onChangeHandler","e","currentTarget","id","changeValue","maxValue","min","value","max","main","itemA","preInline","onChange","type","itemB","ValuePart","count","viewMode","textForInfoPart","helper","errorSpan","infoSpan","forIfoPat","color","InfoPart","counterValue","whatToRender","Counter","app","showSettings","whatDisplay","buttonsArea","onChangeView","preElement","onIncClick","onResClick","App","useState","setMaxValue","setCount","setDisabled","forButton","setViewMode","useEffect","resultForSettings","localStorage","getItem","resultForValueCount","stateSettingsValues","JSON","parse","currentValue","onChangeMax","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.41839a3a.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Customizator_main__3lrSW\",\"preInline\":\"Customizator_preInline__2r9iK\",\"itemA\":\"Customizator_itemA__1D7q3\",\"itemB\":\"Customizator_itemB__3hkoQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Counter_main__1fqxt\",\"buttonsArea\":\"Counter_buttonsArea__MUiLv\",\"preElement\":\"Counter_preElement__3hCek\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"errorSpan\":\"ValuePart_errorSpan__gBsLO\",\"infoSpan\":\"ValuePart_infoSpan__BDMGU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inc\":\"Button_inc__1YmC_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counterValue\":\"InfoPart_counterValue__-AZ5E\"};","import React from 'react';\r\nimport styles from \"./Button.module.css\";\r\n\r\n\r\ntype ButtonType = {\r\n    text: string;\r\n    onClick: () => void;\r\n    disabled: {inc: boolean, res: boolean, set: boolean};\r\n\r\n}\r\nexport const Button = ({disabled,...props}: ButtonType) => {\r\n    const disabledForButton = props.text === 'inc' ? disabled.inc : props.text === 'res' ? disabled.res : disabled.set;\r\n    return <button onClick={props.onClick} className={styles.inc} style={{opacity: disabledForButton ? '0.5' : '1'}} disabled={disabledForButton}>\r\n        {props.text}\r\n    </button>\r\n}","import React, {ChangeEvent} from 'react';\r\nimport styles from './Customizator.module.css';\r\nimport {MinMaxValues} from \"../../App\";\r\n\r\ntype CustomizationType = {\r\n    maxValue: MinMaxValues;\r\n    changeValue: (value: MinMaxValues) => void;\r\n}\r\n\r\n//todo менять значение в LocalStorage сразу, без Set\r\n\r\nexport const Customization = (props: CustomizationType) => {\r\n\r\n\r\n    const onChangeHandler = (e:ChangeEvent<HTMLInputElement>) => {\r\n        e.currentTarget.id === 'min' ? props.changeValue({...props.maxValue, min: +e.currentTarget.value }) : props.changeValue({...props.maxValue, max: +e.currentTarget.value})\r\n    };\r\n\r\n    return <div className={styles.main}>\r\n        <div className={styles.itemA}><pre className={styles.preInline}>Min value</pre> <input id={'min'} value={props.maxValue.min} onChange={onChangeHandler} type={'number'}/></div>\r\n        <div className={styles.itemB}><pre className={styles.preInline}>Max value</pre> <input id={'max'} value={props.maxValue.max} onChange={onChangeHandler} type={'number'}/></div>\r\n    </div>\r\n}","import React from 'react';\r\nimport {ViewModeType} from \"../../../App\";\r\nimport styles from './ValuePart.module.css'\r\n\r\ntype ValuePartPropsType = {\r\n    count: number;\r\n    viewMode: ViewModeType;\r\n    disabled: {inc: boolean, res: boolean};\r\n}\r\n\r\nexport  const ValuePart = ({count, viewMode, ...props}: ValuePartPropsType) => {\r\n    const textForInfoPart =  viewMode.helper ? <span className={styles.errorSpan}>Incorrect value</span> : <span className={styles.infoSpan}>Enter value and press 'set'</span>\r\n    return viewMode.forIfoPat? textForInfoPart : <span style={{color: props.disabled.inc ? 'red' : '#282c34' }}>{count}</span>\r\n}","import React from 'react';\r\nimport styles from \"./InfoPart.module.css\";\r\nimport {Customization} from \"../ChangeValueComponent/Customizator\";\r\nimport {MinMaxValues, ViewModeType} from \"../../App\";\r\nimport {ValuePart} from \"./ValuePart/ValuePart\";\r\n\r\ntype InfoPartType = {\r\n    whatToRender: string;\r\n    count:  number;\r\n    disabled: {inc: boolean, res: boolean};\r\n    maxValue: MinMaxValues;\r\n    changeValue: (value: MinMaxValues) => void;\r\n    viewMode: ViewModeType;\r\n    showSettings: boolean;\r\n}\r\nexport const InfoPart = ({viewMode, ...props}: InfoPartType) => {\r\n\r\n\r\n   return  <div className={styles.counterValue}>\r\n\r\n       {props.whatToRender === 'value' ? <ValuePart count={props.count} viewMode={viewMode} disabled={props.disabled}/>:<Customization changeValue={props.changeValue}  maxValue={props.maxValue}/>}\r\n    </div>\r\n}","import React  from 'react';\r\nimport styles from './Counter.module.css';\r\n\r\nimport {Button} from \"./Button/Button\";\r\nimport {InfoPart} from \"./infoPart/InfoPart\";\r\nimport {MinMaxValues, ViewModeType} from \"../App\";\r\n\r\n\r\ntype CounterPropsType = {\r\n    count: number;\r\n    onIncClick: () => void;\r\n    onResClick: () => void;\r\n    disabled: {inc: boolean, res: boolean, set: boolean};\r\n    whatDisplay: string;\r\n    onChangeView: () => void;\r\n    maxValue: MinMaxValues;\r\n    changeValue: (value: MinMaxValues) => void;\r\n    viewMode: ViewModeType;\r\n    showSettings: boolean;\r\n};\r\n\r\n\r\nexport const Counter = (props: CounterPropsType) => {\r\n    return <div className={styles.app}>\r\n        <div className={styles.main}>\r\n                  <InfoPart showSettings={true} viewMode={props.viewMode} maxValue={props.maxValue} changeValue={props.changeValue} disabled={props.disabled} count={props.count} whatToRender={props.whatDisplay}/>\r\n            <div className={styles.buttonsArea}>\r\n                {\r\n                    props.whatDisplay === 'custom' ? <Button text={'set'} onClick={props.onChangeView} disabled={props.disabled}/>\r\n                        : <pre className={styles.preElement}>\r\n                            <Button text={'inc'} onClick={props.onIncClick} disabled={props.disabled}/>\r\n                            <Button text={'res'} onClick={props.onResClick} disabled={props.disabled}/>\r\n                    </pre>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n\r\n\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport {Counter} from \"./Counter/Counter\";\nimport './App.css';\n\ntype DisabledType = {\n    inc: boolean;\n    res: boolean;\n    set: boolean;\n};\nexport type MinMaxValues = { min:number, max: number };\nexport type ViewModeType = { forIfoPat: boolean, forButton: boolean, helper: boolean };\n\nfunction App() {\n\n    const [maxValue, setMaxValue] = useState<MinMaxValues>({min:0, max:5});\n    let [count, setCount] = useState(maxValue.min);  //todo где должно стоять useEffect?\n    const [disabled, setDisabled] = useState<DisabledType>({inc: false, res: true, set: false});\n    const [viewMode, setViewMode] = useState<ViewModeType>({ forIfoPat: false, forButton: false, helper: true });\n\n    useEffect(() => {\n        debugger\n        const resultForSettings = localStorage.getItem('maxValue');\n        const resultForValueCount = localStorage.getItem('count');\n\n        if(resultForValueCount && resultForSettings) {\n            let stateSettingsValues = JSON.parse(resultForSettings);\n            setMaxValue(stateSettingsValues);\n            let currentValue = JSON.parse(resultForValueCount)\n            setCount(currentValue);\n            if(stateSettingsValues.max <= currentValue) {\n                setDisabled({inc: true, res: false, set: false}); //todo как можно сделать?\n            }\n        }\n\n    }, []);\n\n    const onIncClick = () => {\n        setCount(++count);\n        if (maxValue.max !== count) {\n            setDisabled({inc: false, res: false, set: false});\n        }\n        else {\n            setDisabled({inc: true, res: false, set: false});\n        }\n    }\n    const onResClick = () => {\n        setCount(maxValue.min);\n        setDisabled({inc: false, res: true, set: false});\n    }\n    const changeValue = (value: MinMaxValues) => {\n        setMaxValue(value);\n        setCount(value.min);\n\n        setDisabled({...disabled, inc: true, set: false});\n        setViewMode({ forIfoPat: true, forButton: false, helper: false  });\n        if (value.min >= value.max || value.min<0) {\n            setViewMode({ forIfoPat: true, forButton: false, helper: true});\n            setDisabled({inc: true, res: true, set: true})\n        }\n\n\n    };\n    const onChangeMax = () => {\n\n        setDisabled( {...disabled, inc: false, set: false});\n        maxValue.max === count ?   setDisabled( {inc: true, set: false, res: false}) : setViewMode({ forIfoPat: false, forButton: false, helper: true });\n\n    };\n    useEffect(() => {\n        localStorage.setItem('maxValue', JSON.stringify(maxValue));\n        localStorage.setItem('count', JSON.stringify(count));\n    }, [maxValue, count])\n\n\n  return (\n    <div className=\"App\">\n        <Counter showSettings={true} viewMode={viewMode} changeValue={changeValue} onChangeView={onChangeMax} maxValue={maxValue} count={count} onIncClick={onIncClick} onResClick={onResClick} disabled={disabled} whatDisplay={'custom'}/>\n        <Counter showSettings={false} viewMode={viewMode} changeValue={changeValue} onChangeView={onChangeMax} maxValue={maxValue} count={count} onIncClick={onIncClick} onResClick={onResClick} disabled={disabled} whatDisplay={'value'}/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}